/* CORE: mixins set */


// global show / hide
.visible(@pointeEvents: false) {
	opacity: 1;
	visibility: visible;

	& when (@pointeEvents = true) {
		pointer-events: auto;
	}
}
.hidden(@pointeEvents: false) {
	opacity: 0;
	visibility: hidden;

	& when (@pointeEvents = true) {
		pointer-events: none;
	}
}


// box clearing stuff - with pseudo-element :after
.clearFix-after() {
	&:after {
		display: block;
		height: 0;
		clear: both;
		content: '.';
		overflow: hidden;
	}
}


// strech element
.strechPosition(@type: absolute, @offset: 0, @onlyOffset: false) {
	top: @offset;
	right: @offset;
	bottom: @offset;
	left: @offset;

	& when (@onlyOffset = false) {
		position: @type;
	}
}


// disable state - prevent clicks and optionally selection on mouse select
.disabled(@opacity: 0.5, @userSelect: true) {
	opacity: @opacity;
	pointer-events: none;

	& when (@userSelect = true) {
		user-select: none;
	}
}


// text ellipsis - setting @maxWidth: initial won't generate max-width property
.text-ellipsis(@maxWidth: 100%) {
	text-overflow: ellipsis;
	overflow: hidden;
	white-space: nowrap;

	& when (isnumber(@maxWidth)) {
		max-width: @maxWidth;
	}
}


// centering flex
.centering-flex() {
	display: flex;
	justify-content: center;
	align-items: center;
}


// centering transform
.center-transform(@position: absolute, @offsetX: 50%, @offsetY: 50%) {
	position: @position;
	top: @offsetY%;
	left: @offsetX;
	transform: translate(-@offsetX, -@offsetY);
}